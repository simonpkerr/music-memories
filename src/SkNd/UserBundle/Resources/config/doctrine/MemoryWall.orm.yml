SkNd\UserBundle\Entity\MemoryWall:
  type: entity
  repositoryClass: SkNd\UserBundle\Repository\MemoryWallRepository
  table: memorywall
  fields:
    id:
      type: integer
      id: true
      generator:
        strategy: AUTO
    name:
      type: string
      length: 50
      default: My Memory Wall
    slug:
      type: string
      length: 255
      gedmo:
        slug:
          fields:
            - name
    description:
      type: string
      length: 255
      nullable: true
    dateCreated:
      type: datetime
      gedmo:
        timestampable:
          on: create
    isPublic:
      type: boolean
      nullable: true
      default: true
    lastUpdated:
      type: datetime
      gedmo:
        timestampable:
          on: update
  lifecycleCallbacks: {  }
  oneToMany:
    memoryWallMediaResources:
      targetEntity: MemoryWallMediaResource
      mappedBy: memoryWall
      cascade: ["persist", "remove"]
      orphanRemoval: true
      #the indexBy key means that the resulting array collection in memory wall will be indexed by media resource ids
      #meaning that searches for specific media resources are easier
      indexBy: mediaResource_id
      orderBy:
        dateAdded: desc
  manyToOne:
    associatedDecade:
      targetEntity: SkNd\MediaBundle\Entity\Decade
      nullable: true
      joinColumn:
        name: associatedDecade_id
        referencedColumnName: id
        onDelete: set null
    user:
      targetEntity: User
      inversedBy: memoryWalls
      #the below statement ensures that from the databases point of view, when users are deleted, the referenced memory walls are also removed
      joinColumn:
        name: user_id
        referencedColumnName: id

     
